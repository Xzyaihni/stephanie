using NVIDIA GeForce GTX 1050 Ti
framebuffer format: B8G8R8A8_SRGB
building: {
    Right: [park, building, ↓park, ↓building, ↓road_end, ↓road_corner, →park, ←park],
    Left: [park, building, road_end, road_corner, ↓park, ↓building, →park, ←park],
    Up: [building, road_end, road_straight, road_corner, ↓road_end, ↓road_straight],
    Down: [park, building, road_end, road_straight, →park, ←park, ↓park, ↓road_end, ↓road_straight],
},
→road_corner: {
    Right: [→road_intersection, ↓road_intersection, ←road_intersection, road_intersection],
    Left: [→park, →building, →bunker, ←park, ←building, ←bunker, ↓park, park],
    Up: [→road_straight, →road_intersection, ↓road_intersection, ←road_straight, ←road_intersection, road_intersection],
    Down: [→park, →building, →bunker, ←park, ↓park, park],
},
→road_intersection: {
    Right: [↓road_straight, ←road_corner, road_corner, road_straight],
    Left: [→road_corner, road_straight, ↓road_corner, ↓road_straight],
    Up: [→road_straight, ↓road_corner, ←road_corner, ←road_straight],
    Down: [→road_corner, →road_straight, ←road_straight, road_corner],
},
→park: {
    Right: [→park, →road_corner, →road_straight, →building, →bunker, →road_end, ↓park, ↓road_corner, ↓building, ↓bunker, ↓road_end, ←park, ←road_straight, ←road_end, park, building, bunker, ←building, ←bunker],
    Left: [→park, →road_straight, →road_end, park, road_corner, building, bunker, road_end, ←park, ←road_corner, ←road_straight, ←building, ←bunker, ←road_end, ↓park, ↓building, ↓bunker],
    Up: [→park, →road_corner, →building, →bunker, →road_end, park, road_corner, road_straight, building, bunker, road_end, ↓park, ↓road_straight, ↓road_end, ←park, ←building, ←bunker, ←road_end],
    Down: [→park, →building, →bunker, ←park, ←road_corner, ←building, ←bunker, ←road_end, ↓park, ↓road_corner, ↓road_straight, ↓building, ↓bunker, ↓road_end, park, road_straight, road_end],
},
←park: {
    Right: [←park, ←road_straight, ←road_end, park, building, bunker, →park, →building, →bunker, →road_straight, →road_corner, →road_end, ↓park, ↓building, ↓bunker, ↓road_corner, ↓road_end],
    Left: [←park, ←building, ←bunker, ←road_straight, ←road_corner, ←road_end, ↓park, ↓building, ↓bunker, →park, →road_straight, →road_end, park, building, bunker, road_corner, road_end, →building, →bunker],
    Up: [←park, ←building, ←bunker, ↓park, ↓road_straight, ↓road_end, park, building, bunker, road_straight, road_corner, road_end, →park, →building, →bunker, →road_corner, →road_end],
    Down: [←park, ←building, ←bunker, ←road_corner, ←road_end, →park, →building, →bunker, park, road_straight, road_end, ↓park, ↓building, ↓bunker, ↓road_straight, ↓road_corner, ↓road_end, →road_end],
},
↓bunker: {
    Right: [↓park, ↓road_end, ↓road_corner, park, →park, ←park],
    Left: [↓park, park, road_end, road_corner, →park, ←park],
    Up: [↓park, ↓road_end, ↓road_straight, →park, ←park, road_end, road_straight, park],
    Down: [↓road_straight, ↓road_end, ↓road_corner, road_end, road_straight],
},
↓road_intersection: {
    Right: [↓road_straight, ←road_corner, road_straight, road_corner],
    Left: [↓road_straight, ↓road_corner, →road_corner, road_straight],
    Up: [↓road_corner, →road_straight, ←road_straight, ←road_corner],
    Down: [road_corner, ←road_straight, →road_straight, →road_corner],
},
←building: {
    Right: [←park, ←building, ←road_straight, ←road_end, →building, →road_straight, →road_corner, →road_end, →park, ↓park, park],
    Left: [←building, ←road_straight, ←road_corner, ←road_end, →park, →building, →road_straight, →road_end],
    Up: [←park, ←building, →park, ↓park, park],
    Down: [←park, ←building, ←road_corner, ←road_end, →park, ↓park, park, →road_end],
},
←bunker: {
    Right: [←park, ←road_straight, ←road_end, →road_straight, →road_corner, →road_end, →park, ↓park, park],
    Left: [←road_straight, ←road_corner, ←road_end, →park, →road_straight, →road_end],
    Up: [←park, →park, ↓park, park],
    Down: [←park, ←road_corner, ←road_end, →park, ↓park, park, →road_end],
},
↓building: {
    Right: [↓park, ↓building, ↓road_end, ↓road_corner, park, building, →park, ←park],
    Left: [↓park, ↓building, park, building, road_end, road_corner, →park, ←park],
    Up: [↓park, ↓building, ↓road_end, ↓road_straight, →park, ←park, road_end, road_straight, park],
    Down: [↓building, ↓road_end, ↓road_straight, ↓road_corner, road_end, road_straight],
},
bunker: {
    Right: [park, ↓park, ↓road_end, ↓road_corner, →park, ←park],
    Left: [park, road_end, road_corner, ↓park, →park, ←park],
    Up: [road_straight, road_end, road_corner, ↓road_end, ↓road_straight],
    Down: [park, road_end, road_straight, →park, ←park, ↓park, ↓road_end, ↓road_straight],
},
road_end: {
    Right: [park, building, bunker, →park, ←park, ↓bunker, ↓building, ↓park],
    Left: [road_straight, ↓road_straight],
    Up: [park, building, bunker, ↓park, ↓building, ↓bunker, →park, ←park],
    Down: [park, building, bunker, ↓park, ↓building, ↓bunker, →park, ←park],
},
←road_straight: {
    Right: [←park, ←building, ←bunker, →park, →building, →bunker, ↓park, park],
    Left: [←park, ←building, ←bunker, →park, →building, →bunker, ↓park, park],
    Up: [←road_straight, ←road_intersection, ←road_corner, ←road_end, →road_straight, →road_intersection, ↓road_intersection, road_intersection, →road_end],
    Down: [←road_straight, ←road_intersection, →road_straight, →road_intersection, →road_corner, →road_end, ↓road_intersection, road_intersection],
},
←road_corner: {
    Right: [←park, ←building, ←bunker, →park, ↓park, →building, →bunker, park],
    Left: [←road_intersection, →road_intersection, ↓road_intersection, road_intersection],
    Up: [←park, ←building, ←bunker, →park, ↓park, park],
    Down: [←road_straight, ←road_intersection, →road_intersection, ↓road_intersection, →road_straight, road_intersection],
},
→road_straight: {
    Right: [→park, →building, →bunker, ←park, ←building, ←bunker, ↓park, park],
    Left: [→park, →building, →bunker, ←park, ←building, ←bunker, ↓park, park],
    Up: [→road_straight, →road_intersection, ←road_straight, ←road_intersection, ←road_corner, ←road_end, ↓road_intersection, road_intersection],
    Down: [→road_straight, →road_intersection, →road_corner, →road_end, ←road_straight, ←road_intersection, ↓road_intersection, ←road_end, road_intersection],
},
←road_intersection: {
    Right: [←road_corner, road_straight, road_corner, ↓road_straight],
    Left: [↓road_straight, ↓road_corner, →road_corner, road_straight],
    Up: [←road_straight, ←road_corner, ↓road_corner, →road_straight],
    Down: [←road_straight, →road_straight, →road_corner, road_corner],
},
↓park: {
    Right: [↓park, ↓bunker, ↓building, ↓road_end, ↓road_corner, ←park, ←road_end, ←road_straight, park, bunker, building, →park, →bunker, →building, →road_end, →road_straight, →road_corner],
    Left: [↓park, ↓bunker, ↓building, →park, →road_end, →road_straight, park, bunker, building, road_end, road_corner, ←park, ←bunker, ←building, ←road_end, ←road_straight, ←road_corner],
    Up: [↓park, ↓road_end, ↓road_straight, →park, →bunker, →building, →road_end, →road_corner, ←park, ←bunker, ←building, park, bunker, building, road_end, road_straight, road_corner],
    Down: [↓park, ↓bunker, ↓building, ↓road_end, ↓road_straight, ↓road_corner, park, road_end, road_straight, ←park, ←bunker, ←building, ←road_end, ←road_corner, →park, →bunker, →building],
},
→building: {
    Right: [→road_corner, →road_straight, →building, →road_end, ←park, ←building, ←road_straight, ←road_end],
    Left: [→park, →building, →road_straight, →road_end, ←road_corner, ←road_straight, ←building, ←road_end, ←park, ↓park, park],
    Up: [→park, →building, →road_corner, →road_end, ←park, ↓park, ←road_end, park],
    Down: [→park, →building, ←park, ↓park, park],
},
→bunker: {
    Right: [→road_straight, →road_corner, →road_end, ←park, ←road_straight, ←road_end],
    Left: [→park, →road_straight, →road_end, ←road_straight, ←road_corner, ←road_end, ←park, ↓park, park],
    Up: [→park, →road_corner, →road_end, ←park, ↓park, ←road_end, park],
    Down: [→park, ←park, ↓park, park],
},
←road_end: {
    Right: [←park, ←building, ←bunker, →park, ↓park, →building, →bunker, park],
    Left: [←park, ←building, ←bunker, →park, ↓park, →building, →bunker, park],
    Up: [←park, ←building, ←bunker, →road_straight, →park, ↓park, park],
    Down: [←road_straight, →park, →building, →bunker, →road_straight],
},
↓road_end: {
    Right: [↓road_straight, road_straight],
    Left: [↓park, ↓building, ↓bunker, building, →park, ←park, bunker, park],
    Up: [↓park, ↓building, ↓bunker, park, building, bunker, →park, ←park],
    Down: [↓park, ↓building, ↓bunker, park, building, bunker, →park, ←park],
},
road_intersection: {
    Right: [road_straight, road_corner, ↓road_straight, ←road_corner],
    Left: [road_straight, ↓road_straight, ↓road_corner, →road_corner],
    Up: [←road_straight, ←road_corner, →road_straight, ↓road_corner],
    Down: [road_corner, →road_straight, →road_corner, ←road_straight],
},
road_straight: {
    Right: [road_straight, road_intersection, road_end, road_corner, ↓road_straight, ↓road_intersection, →road_intersection, ←road_intersection],
    Left: [road_straight, road_intersection, ↓road_straight, ↓road_intersection, ↓road_end, ↓road_corner, →road_intersection, ←road_intersection],
    Up: [park, building, bunker, ↓park, ↓building, ↓bunker, →park, ←park],
    Down: [park, building, bunker, ↓park, ↓building, ↓bunker, →park, ←park],
},
↓road_straight: {
    Right: [↓road_straight, ↓road_intersection, road_straight, road_intersection, road_end, road_corner, →road_intersection, ←road_intersection],
    Left: [↓road_straight, ↓road_intersection, ↓road_end, ↓road_corner, road_straight, road_intersection, →road_intersection, ←road_intersection],
    Up: [↓park, ↓building, ↓bunker, park, building, bunker, →park, ←park],
    Down: [↓park, ↓building, ↓bunker, park, building, bunker, →park, ←park],
},
road_corner: {
    Right: [park, building, bunker, →park, ←park, ↓bunker, ↓building, ↓park],
    Left: [road_straight, road_intersection, →road_intersection, ↓road_intersection, ←road_intersection, ↓road_straight],
    Up: [road_intersection, →road_intersection, ↓road_intersection, ←road_intersection],
    Down: [park, building, bunker, →park, ←park, ↓park],
},
↓road_corner: {
    Right: [↓road_straight, ↓road_intersection, →road_intersection, ←road_intersection, road_intersection, road_straight],
    Left: [↓park, ↓building, ↓bunker, building, →park, ←park, bunker, park],
    Up: [↓park, ↓building, ↓bunker, →park, ←park, park],
    Down: [↓road_intersection, →road_intersection, ←road_intersection, road_intersection],
},
park: {
    Right: [park, building, bunker, →park, →building, →bunker, →road_end, →road_straight, →road_corner, ↓park, ↓building, ↓bunker, ↓road_end, ↓road_corner, ←park, ←road_end, ←road_straight],
    Left: [park, building, bunker, road_end, road_corner, ←park, ←building, ←bunker, ←road_end, ←road_straight, ←road_corner, ↓park, ↓building, ↓bunker, →park, →road_end, →road_straight],
    Up: [park, building, bunker, road_end, road_straight, road_corner, ←park, ←building, ←bunker, →park, →building, →bunker, →road_end, →road_corner, ↓park, ↓road_end, ↓road_straight],
    Down: [park, road_end, road_straight, ↓park, ↓building, ↓bunker, ↓road_end, ↓road_straight, ↓road_corner, →park, →building, →bunker, ←park, ←building, ←bunker, ←road_end, ←road_corner],
},
→road_end: {
    Right: [→park, →building, →bunker, ←park, ←building, ←bunker, ↓park, park],
    Left: [→park, →building, →bunker, ←park, ←building, ←bunker, ↓park, park],
    Up: [→road_straight, ←park, ←building, ←bunker, ←road_straight],
    Down: [→park, →building, →bunker, ←road_straight, ←park, ↓park, park],
},
←underground: {
    Right: [←underground, underground, →underground, ↓underground],
    Left: [←underground, ↓underground, →underground, underground],
    Up: [←underground, ↓underground, underground, →underground],
    Down: [←underground, →underground, underground, ↓underground],
},
↓underground: {
    Right: [↓underground, ←underground, underground, →underground],
    Left: [↓underground, →underground, underground, ←underground],
    Up: [↓underground, →underground, ←underground, underground],
    Down: [↓underground, underground, ←underground, →underground],
},
underground: {
    Right: [underground, →underground, ↓underground, ←underground],
    Left: [underground, ←underground, ↓underground, →underground],
    Up: [underground, ←underground, →underground, ↓underground],
    Down: [underground, ↓underground, →underground, ←underground],
},
→underground: {
    Right: [→underground, ↓underground, ←underground, underground],
    Left: [→underground, underground, ←underground, ↓underground],
    Up: [→underground, underground, ↓underground, ←underground],
    Down: [→underground, ←underground, ↓underground, underground],
},
running in debug mode, available tools:
STEPHANIE_LISP
STEPHANIE_LISPDISABLECHECKS
STEPHANIE_REDUNDANTWORLDCHECKS
STEPHANIE_MESSAGES
STEPHANIE_MESSAGESFULL
STEPHANIE_DISPLAYRAYCAST
STEPHANIE_DISPLAYPATHFIND
STEPHANIE_COLLISIONWORLDBOUNDS
STEPHANIE_COLLISIONBOUNDS
STEPHANIE_CONTACTS
STEPHANIE_SLEEPING
STEPHANIE_VELOCITY
STEPHANIE_SPATIAL
STEPHANIE_SPATIALFULL
STEPHANIE_SUPERSPEED
STEPHANIE_SKIPLOADING
STEPHANIE_DAMAGEPOINTS
STEPHANIE_LOADPOSITION
STEPHANIE_PRINTDAMAGE
STEPHANIE_PRINTANATOMYCOLORS
STEPHANIE_PRINTLISTENERUPDATES
STEPHANIE_PRINTSTAGE
STEPHANIE_PRINTCONTACTSCOUNT
STEPHANIE_PRINTPUSHENTITY
STEPHANIE_PRINTSURFACERULES
STEPHANIE_DRAWTILEOCCLUSION
STEPHANIE_GPUDRAWTIMINGS
STEPHANIE_FRAMETIMINGS
STEPHANIE_NOOCCLUSION
STEPHANIE_NOWALLOCCLUSION
STEPHANIE_NOSKYOCCLUSION
STEPHANIE_NOLIGHTING
STEPHANIE_NOGRAVITY
STEPHANIE_NORESOLVE
STEPHANIE_NOJOINTS
STEPHANIE_NOSPAWNS
loading player "yandere"
world-gen took 622.94 ms
debug console opened
ran command (send-debug-message "\"PrintServerOvermaps\""), result: ()
server overmaps: {
    ConnectionId(
        0,
    ): RefCell {
        value: WorldGenerator {
            generator: ChunkGenerator {
                tilemap: TileMap {
                    air: TileInfo {
                        name: "air",
                        textures: [],
                        health: 0.0,
                        drawable: false,
                        special: None,
                        colliding: false,
                        transparent: true,
                    },
                    tiles: [
                        TileInfo {
                            name: "asphalt",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 0,
                                },
                            ],
                            health: 0.9,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "asphalt-line-horizontal",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 1,
                                },
                            ],
                            health: 0.9,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "asphalt-line-vertical",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 2,
                                },
                            ],
                            health: 0.9,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "asphalt-line-corner-up",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 3,
                                },
                            ],
                            health: 0.9,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "asphalt-line-corner-right",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 4,
                                },
                            ],
                            health: 0.9,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "asphalt-line-corner-left",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 5,
                                },
                            ],
                            health: 0.9,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "asphalt-line-corner-down",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 6,
                                },
                            ],
                            health: 0.9,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "grassie",
                            textures: [
                                TileTexture {
                                    weight: 0.22222224,
                                    id: 7,
                                },
                                TileTexture {
                                    weight: 0.33333334,
                                    id: 8,
                                },
                                TileTexture {
                                    weight: 0.44444448,
                                    id: 9,
                                },
                            ],
                            health: 0.15,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "concrete",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 10,
                                },
                            ],
                            health: 1.0,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "wood",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 11,
                                },
                            ],
                            health: 0.1,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "soil",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 12,
                                },
                            ],
                            health: 0.2,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: false,
                        },
                        TileInfo {
                            name: "glass",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 13,
                                },
                            ],
                            health: 0.004,
                            drawable: true,
                            special: None,
                            colliding: true,
                            transparent: true,
                        },
                        TileInfo {
                            name: "concrete-fence",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 14,
                                },
                            ],
                            health: 1.0,
                            drawable: true,
                            special: None,
                            colliding: false,
                            transparent: true,
                        },
                        TileInfo {
                            name: "concrete-fence-l",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 15,
                                },
                            ],
                            health: 1.0,
                            drawable: true,
                            special: None,
                            colliding: false,
                            transparent: true,
                        },
                        TileInfo {
                            name: "stairs-up",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 16,
                                },
                            ],
                            health: 1.0,
                            drawable: true,
                            special: Some(
                                StairsUp,
                            ),
                            colliding: false,
                            transparent: true,
                        },
                        TileInfo {
                            name: "stairs-down",
                            textures: [
                                TileTexture {
                                    weight: 1.0,
                                    id: 17,
                                },
                            ],
                            health: 1.0,
                            drawable: true,
                            special: Some(
                                StairsDown,
                            ),
                            colliding: true,
                            transparent: false,
                        },
                    ],
                },
            },
            saver: Saver {
                start: Instant {
                    tv_sec: 61695,
                    tv_nsec: 631794236,
                },
                cache_amount: 100,
                cache: [],
                file_saver: Mutex {
                    data: FileSaver {
                        parent_path: "worlds/default/world_chunks",
                        unsaved_chunks: {},
                        save_tx: Sender { .. },
                        finish_rx: Receiver { .. },
                    },
                },
            },
            rules: ChunkRulesGroup {
                name_mappings: NameMappings {
                    world_chunk: BiMap {
                        normal: {
                            (
                                Left,
                                "park",
                            ): WorldChunkId(27),
                            (
                                Left,
                                "road_straight",
                            ): WorldChunkId(15),
                            (
                                Down,
                                "park",
                            ): WorldChunkId(28),
                            (
                                Up,
                                "building",
                            ): WorldChunkId(1),
                            (
                                Down,
                                "underground",
                            ): WorldChunkId(32),
                            (
                                Right,
                                "building",
                            ): WorldChunkId(2),
                            (
                                Up,
                                "underground",
                            ): WorldChunkId(29),
                            (
                                Left,
                                "road_intersection",
                            ): WorldChunkId(23),
                            (
                                Right,
                                "road_end",
                            ): WorldChunkId(10),
                            (
                                Up,
                                "road_straight",
                            ): WorldChunkId(13),
                            (
                                Left,
                                "building",
                            ): WorldChunkId(3),
                            (
                                Right,
                                "road_straight",
                            ): WorldChunkId(14),
                            (
                                Down,
                                "road_corner",
                            ): WorldChunkId(20),
                            (
                                Down,
                                "road_intersection",
                            ): WorldChunkId(24),
                            (
                                Down,
                                "road_straight",
                            ): WorldChunkId(16),
                            (
                                Right,
                                "road_intersection",
                            ): WorldChunkId(22),
                            (
                                Down,
                                "building",
                            ): WorldChunkId(4),
                            (
                                Left,
                                "road_end",
                            ): WorldChunkId(11),
                            (
                                Left,
                                "bunker",
                            ): WorldChunkId(7),
                            (
                                Down,
                                "road_end",
                            ): WorldChunkId(12),
                            (
                                Up,
                                "road_corner",
                            ): WorldChunkId(17),
                            (
                                Up,
                                "none",
                            ): WorldChunkId(0),
                            (
                                Up,
                                "road_intersection",
                            ): WorldChunkId(21),
                            (
                                Right,
                                "bunker",
                            ): WorldChunkId(6),
                            (
                                Right,
                                "road_corner",
                            ): WorldChunkId(18),
                            (
                                Up,
                                "park",
                            ): WorldChunkId(25),
                            (
                                Right,
                                "underground",
                            ): WorldChunkId(30),
                            (
                                Down,
                                "bunker",
                            ): WorldChunkId(8),
                            (
                                Left,
                                "underground",
                            ): WorldChunkId(31),
                            (
                                Up,
                                "bunker",
                            ): WorldChunkId(5),
                            (
                                Right,
                                "park",
                            ): WorldChunkId(26),
                            (
                                Up,
                                "road_end",
                            ): WorldChunkId(9),
                            (
                                Left,
                                "road_corner",
                            ): WorldChunkId(19),
                        },
                        back: {
                            WorldChunkId(5): (
                                Up,
                                "bunker",
                            ),
                            WorldChunkId(21): (
                                Up,
                                "road_intersection",
                            ),
                            WorldChunkId(27): (
                                Left,
                                "park",
                            ),
                            WorldChunkId(8): (
                                Down,
                                "bunker",
                            ),
                            WorldChunkId(17): (
                                Up,
                                "road_corner",
                            ),
                            WorldChunkId(6): (
                                Right,
                                "bunker",
                            ),
                            WorldChunkId(20): (
                                Down,
                                "road_corner",
                            ),
                            WorldChunkId(10): (
                                Right,
                                "road_end",
                            ),
                            WorldChunkId(14): (
                                Right,
                                "road_straight",
                            ),
                            WorldChunkId(0): (
                                Up,
                                "none",
                            ),
                            WorldChunkId(22): (
                                Right,
                                "road_intersection",
                            ),
                            WorldChunkId(29): (
                                Up,
                                "underground",
                            ),
                            WorldChunkId(13): (
                                Up,
                                "road_straight",
                            ),
                            WorldChunkId(18): (
                                Right,
                                "road_corner",
                            ),
                            WorldChunkId(7): (
                                Left,
                                "bunker",
                            ),
                            WorldChunkId(26): (
                                Right,
                                "park",
                            ),
                            WorldChunkId(12): (
                                Down,
                                "road_end",
                            ),
                            WorldChunkId(23): (
                                Left,
                                "road_intersection",
                            ),
                            WorldChunkId(24): (
                                Down,
                                "road_intersection",
                            ),
                            WorldChunkId(4): (
                                Down,
                                "building",
                            ),
                            WorldChunkId(2): (
                                Right,
                                "building",
                            ),
                            WorldChunkId(28): (
                                Down,
                                "park",
                            ),
                            WorldChunkId(3): (
                                Left,
                                "building",
                            ),
                            WorldChunkId(19): (
                                Left,
                                "road_corner",
                            ),
                            WorldChunkId(30): (
                                Right,
                                "underground",
                            ),
                            WorldChunkId(9): (
                                Up,
                                "road_end",
                            ),
                            WorldChunkId(11): (
                                Left,
                                "road_end",
                            ),
                            WorldChunkId(25): (
                                Up,
                                "park",
                            ),
                            WorldChunkId(1): (
                                Up,
                                "building",
                            ),
                            WorldChunkId(15): (
                                Left,
                                "road_straight",
                            ),
                            WorldChunkId(31): (
                                Left,
                                "underground",
                            ),
                            WorldChunkId(32): (
                                Down,
                                "underground",
                            ),
                            WorldChunkId(16): (
                                Down,
                                "road_straight",
                            ),
                        },
                    },
                    text: TextMapping {
                        text: [
                            "building-height",
                        ],
                        indexer: NameIndexer(
                            {
                                "building-height": TextId(
                                    0,
                                ),
                            },
                        ),
                    },
                    current_index: 33,
                },
                surface: ChunkRules {
                    rules: {
                        WorldChunkId(1): ChunkRule {
                            name: "building",
                            tags: [
                                ChunkRuleTag {
                                    name: TextId(
                                        0,
                                    ),
                                    content: Program {
                                        memory: MemoryBlock {
                                            primitives: Primitives {
                                                indices: {
                                                    "make-vector": 29,
                                                    "<": 15,
                                                    "symbol?": 17,
                                                    "define": 26,
                                                    "car": 4,
                                                    "*": 10,
                                                    "remainder": 12,
                                                    "random-integer": 34,
                                                    "procedure?": 24,
                                                    "cdr": 5,
                                                    "+": 8,
                                                    "char?": 20,
                                                    "display": 32,
                                                    "=": 13,
                                                    "pair?": 18,
                                                    "newline": 33,
                                                    "vector-ref": 31,
                                                    "/": 11,
                                                    "eval": 28,
                                                    "random-float": 35,
                                                    "lambda": 25,
                                                    "set-cdr!": 7,
                                                    "vector?": 22,
                                                    "if": 2,
                                                    "eq?": 16,
                                                    "cons": 3,
                                                    "set-car!": 6,
                                                    "number?": 23,
                                                    "floor": 36,
                                                    "-": 9,
                                                    "begin": 0,
                                                    "vector-set!": 30,
                                                    "exact->inexact": 37,
                                                    "quote": 1,
                                                    "inexact->exact": 38,
                                                    ">": 14,
                                                    "let": 27,
                                                    "boolean?": 21,
                                                    "null?": 19,
                                                },
                                                primitives: [
                                                    <procedure with at least 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with between 2 and 3 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 3 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 0 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 0 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                ],
                                            },
                                            symbols: Symbols {
                                                mappings: {
                                                    "begin": SymbolId(
                                                        0,
                                                    ),
                                                    "random-integer": SymbolId(
                                                        3,
                                                    ),
                                                    "+": SymbolId(
                                                        1,
                                                    ),
                                                    "*": SymbolId(
                                                        2,
                                                    ),
                                                },
                                                current_id: 4,
                                            },
                                            memory: MemoryBlock {
                                                cars: [
                                                    "()",
                                                    "<environment>",
                                                ],
                                                cdrs: [
                                                    "()",
                                                    "(() ())",
                                                ],
                                                general: [],
                                            },
                                            stack: [],
                                            registers: [
                                                "()",
                                                "(<environment> (() ()))",
                                                "()",
                                                "()",
                                                "(<environment> (() ()))",
                                                "(() ())",
                                            ],
                                        },
                                        code: CompiledProgram {
                                            positions: [
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 1,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 6,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 11,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 16,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 31,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 15,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 15,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 13,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 8,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 3,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                None,
                                            ],
                                            commands: [
                                                PutValue {
                                                    value: <primitive procedure #8>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #10>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #8>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #34>,
                                                    register: Operator,
                                                },
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                PutValue {
                                                    value: 4,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: <length 1>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 1,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 4,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 3,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Jump(
                                                    40,
                                                ),
                                            ],
                                        },
                                    },
                                },
                            ],
                            weight: 0.34631734790174973,
                            rotateable: true,
                            symmetry: Horizontal,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(12),
                                    WorldChunkId(20),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                left: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(9),
                                    WorldChunkId(17),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                up: [
                                    WorldChunkId(1),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                    WorldChunkId(17),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                ],
                                down: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                ],
                            },
                        },
                        WorldChunkId(18): ChunkRule {
                            name: "road_corner",
                            tags: [],
                            weight: 0.08657933697543743,
                            rotateable: true,
                            symmetry: None,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(22),
                                    WorldChunkId(24),
                                    WorldChunkId(23),
                                    WorldChunkId(21),
                                ],
                                left: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                up: [
                                    WorldChunkId(14),
                                    WorldChunkId(22),
                                    WorldChunkId(24),
                                    WorldChunkId(15),
                                    WorldChunkId(23),
                                    WorldChunkId(21),
                                ],
                                down: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                            },
                        },
                        WorldChunkId(22): ChunkRule {
                            name: "road_intersection",
                            tags: [],
                            weight: 0.043289668487718716,
                            rotateable: true,
                            symmetry: All,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(16),
                                    WorldChunkId(19),
                                    WorldChunkId(17),
                                    WorldChunkId(13),
                                ],
                                left: [
                                    WorldChunkId(18),
                                    WorldChunkId(13),
                                    WorldChunkId(20),
                                    WorldChunkId(16),
                                ],
                                up: [
                                    WorldChunkId(14),
                                    WorldChunkId(20),
                                    WorldChunkId(19),
                                    WorldChunkId(15),
                                ],
                                down: [
                                    WorldChunkId(18),
                                    WorldChunkId(14),
                                    WorldChunkId(15),
                                    WorldChunkId(17),
                                ],
                            },
                        },
                        WorldChunkId(26): ChunkRule {
                            name: "park",
                            tags: [],
                            weight: 0.08657933697543743,
                            rotateable: true,
                            symmetry: All,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(26),
                                    WorldChunkId(18),
                                    WorldChunkId(14),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(10),
                                    WorldChunkId(28),
                                    WorldChunkId(20),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(12),
                                    WorldChunkId(27),
                                    WorldChunkId(15),
                                    WorldChunkId(11),
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                ],
                                left: [
                                    WorldChunkId(26),
                                    WorldChunkId(14),
                                    WorldChunkId(10),
                                    WorldChunkId(25),
                                    WorldChunkId(17),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(9),
                                    WorldChunkId(27),
                                    WorldChunkId(19),
                                    WorldChunkId(15),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(11),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                ],
                                up: [
                                    WorldChunkId(26),
                                    WorldChunkId(18),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(10),
                                    WorldChunkId(25),
                                    WorldChunkId(17),
                                    WorldChunkId(13),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(9),
                                    WorldChunkId(28),
                                    WorldChunkId(16),
                                    WorldChunkId(12),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(11),
                                ],
                                down: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(27),
                                    WorldChunkId(19),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(11),
                                    WorldChunkId(28),
                                    WorldChunkId(20),
                                    WorldChunkId(16),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(12),
                                    WorldChunkId(25),
                                    WorldChunkId(13),
                                    WorldChunkId(9),
                                ],
                            },
                        },
                        WorldChunkId(27): ChunkRule {
                            name: "park",
                            tags: [],
                            weight: 0.08657933697543743,
                            rotateable: true,
                            symmetry: All,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(27),
                                    WorldChunkId(15),
                                    WorldChunkId(11),
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(14),
                                    WorldChunkId(18),
                                    WorldChunkId(10),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(20),
                                    WorldChunkId(12),
                                ],
                                left: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(15),
                                    WorldChunkId(19),
                                    WorldChunkId(11),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(26),
                                    WorldChunkId(14),
                                    WorldChunkId(10),
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(17),
                                    WorldChunkId(9),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                ],
                                up: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(28),
                                    WorldChunkId(16),
                                    WorldChunkId(12),
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(13),
                                    WorldChunkId(17),
                                    WorldChunkId(9),
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(18),
                                    WorldChunkId(10),
                                ],
                                down: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(19),
                                    WorldChunkId(11),
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(25),
                                    WorldChunkId(13),
                                    WorldChunkId(9),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(16),
                                    WorldChunkId(20),
                                    WorldChunkId(12),
                                    WorldChunkId(10),
                                ],
                            },
                        },
                        WorldChunkId(8): ChunkRule {
                            name: "bunker",
                            tags: [],
                            weight: 8.657933697543744e-6,
                            rotateable: true,
                            symmetry: Horizontal,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(28),
                                    WorldChunkId(12),
                                    WorldChunkId(20),
                                    WorldChunkId(25),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                left: [
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                    WorldChunkId(9),
                                    WorldChunkId(17),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                up: [
                                    WorldChunkId(28),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                    WorldChunkId(25),
                                ],
                                down: [
                                    WorldChunkId(16),
                                    WorldChunkId(12),
                                    WorldChunkId(20),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                ],
                            },
                        },
                        WorldChunkId(24): ChunkRule {
                            name: "road_intersection",
                            tags: [],
                            weight: 0.043289668487718716,
                            rotateable: true,
                            symmetry: All,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(16),
                                    WorldChunkId(19),
                                    WorldChunkId(13),
                                    WorldChunkId(17),
                                ],
                                left: [
                                    WorldChunkId(16),
                                    WorldChunkId(20),
                                    WorldChunkId(18),
                                    WorldChunkId(13),
                                ],
                                up: [
                                    WorldChunkId(20),
                                    WorldChunkId(14),
                                    WorldChunkId(15),
                                    WorldChunkId(19),
                                ],
                                down: [
                                    WorldChunkId(17),
                                    WorldChunkId(15),
                                    WorldChunkId(14),
                                    WorldChunkId(18),
                                ],
                            },
                        },
                        WorldChunkId(3): ChunkRule {
                            name: "building",
                            tags: [
                                ChunkRuleTag {
                                    name: TextId(
                                        0,
                                    ),
                                    content: Program {
                                        memory: MemoryBlock {
                                            primitives: Primitives {
                                                indices: {
                                                    "make-vector": 29,
                                                    "<": 15,
                                                    "symbol?": 17,
                                                    "define": 26,
                                                    "car": 4,
                                                    "*": 10,
                                                    "remainder": 12,
                                                    "random-integer": 34,
                                                    "procedure?": 24,
                                                    "cdr": 5,
                                                    "+": 8,
                                                    "char?": 20,
                                                    "display": 32,
                                                    "=": 13,
                                                    "pair?": 18,
                                                    "newline": 33,
                                                    "vector-ref": 31,
                                                    "/": 11,
                                                    "eval": 28,
                                                    "random-float": 35,
                                                    "lambda": 25,
                                                    "set-cdr!": 7,
                                                    "vector?": 22,
                                                    "if": 2,
                                                    "eq?": 16,
                                                    "cons": 3,
                                                    "set-car!": 6,
                                                    "number?": 23,
                                                    "floor": 36,
                                                    "-": 9,
                                                    "begin": 0,
                                                    "vector-set!": 30,
                                                    "exact->inexact": 37,
                                                    "quote": 1,
                                                    "inexact->exact": 38,
                                                    ">": 14,
                                                    "let": 27,
                                                    "boolean?": 21,
                                                    "null?": 19,
                                                },
                                                primitives: [
                                                    <procedure with at least 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with between 2 and 3 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 3 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 0 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 0 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                ],
                                            },
                                            symbols: Symbols {
                                                mappings: {
                                                    "begin": SymbolId(
                                                        0,
                                                    ),
                                                    "random-integer": SymbolId(
                                                        3,
                                                    ),
                                                    "+": SymbolId(
                                                        1,
                                                    ),
                                                    "*": SymbolId(
                                                        2,
                                                    ),
                                                },
                                                current_id: 4,
                                            },
                                            memory: MemoryBlock {
                                                cars: [
                                                    "()",
                                                    "<environment>",
                                                ],
                                                cdrs: [
                                                    "()",
                                                    "(() ())",
                                                ],
                                                general: [],
                                            },
                                            stack: [],
                                            registers: [
                                                "()",
                                                "(<environment> (() ()))",
                                                "()",
                                                "()",
                                                "(<environment> (() ()))",
                                                "(() ())",
                                            ],
                                        },
                                        code: CompiledProgram {
                                            positions: [
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 1,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 6,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 11,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 16,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 31,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 15,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 15,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 13,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 8,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 3,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                None,
                                            ],
                                            commands: [
                                                PutValue {
                                                    value: <primitive procedure #8>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #10>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #8>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #34>,
                                                    register: Operator,
                                                },
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                PutValue {
                                                    value: 4,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: <length 1>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 1,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 4,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 3,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Jump(
                                                    40,
                                                ),
                                            ],
                                        },
                                    },
                                },
                            ],
                            weight: 0.34631734790174973,
                            rotateable: true,
                            symmetry: Horizontal,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(15),
                                    WorldChunkId(11),
                                    WorldChunkId(2),
                                    WorldChunkId(14),
                                    WorldChunkId(18),
                                    WorldChunkId(10),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                left: [
                                    WorldChunkId(3),
                                    WorldChunkId(15),
                                    WorldChunkId(19),
                                    WorldChunkId(11),
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(14),
                                    WorldChunkId(10),
                                ],
                                up: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                down: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(19),
                                    WorldChunkId(11),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                    WorldChunkId(10),
                                ],
                            },
                        },
                        WorldChunkId(7): ChunkRule {
                            name: "bunker",
                            tags: [],
                            weight: 8.657933697543744e-6,
                            rotateable: true,
                            symmetry: Horizontal,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(27),
                                    WorldChunkId(15),
                                    WorldChunkId(11),
                                    WorldChunkId(14),
                                    WorldChunkId(18),
                                    WorldChunkId(10),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                left: [
                                    WorldChunkId(15),
                                    WorldChunkId(19),
                                    WorldChunkId(11),
                                    WorldChunkId(26),
                                    WorldChunkId(14),
                                    WorldChunkId(10),
                                ],
                                up: [
                                    WorldChunkId(27),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                down: [
                                    WorldChunkId(27),
                                    WorldChunkId(19),
                                    WorldChunkId(11),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                    WorldChunkId(10),
                                ],
                            },
                        },
                        WorldChunkId(4): ChunkRule {
                            name: "building",
                            tags: [
                                ChunkRuleTag {
                                    name: TextId(
                                        0,
                                    ),
                                    content: Program {
                                        memory: MemoryBlock {
                                            primitives: Primitives {
                                                indices: {
                                                    "make-vector": 29,
                                                    "<": 15,
                                                    "symbol?": 17,
                                                    "define": 26,
                                                    "car": 4,
                                                    "*": 10,
                                                    "remainder": 12,
                                                    "random-integer": 34,
                                                    "procedure?": 24,
                                                    "cdr": 5,
                                                    "+": 8,
                                                    "char?": 20,
                                                    "display": 32,
                                                    "=": 13,
                                                    "pair?": 18,
                                                    "newline": 33,
                                                    "vector-ref": 31,
                                                    "/": 11,
                                                    "eval": 28,
                                                    "random-float": 35,
                                                    "lambda": 25,
                                                    "set-cdr!": 7,
                                                    "vector?": 22,
                                                    "if": 2,
                                                    "eq?": 16,
                                                    "cons": 3,
                                                    "set-car!": 6,
                                                    "number?": 23,
                                                    "floor": 36,
                                                    "-": 9,
                                                    "begin": 0,
                                                    "vector-set!": 30,
                                                    "exact->inexact": 37,
                                                    "quote": 1,
                                                    "inexact->exact": 38,
                                                    ">": 14,
                                                    "let": 27,
                                                    "boolean?": 21,
                                                    "null?": 19,
                                                },
                                                primitives: [
                                                    <procedure with at least 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with between 2 and 3 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 3 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 0 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 0 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                ],
                                            },
                                            symbols: Symbols {
                                                mappings: {
                                                    "begin": SymbolId(
                                                        0,
                                                    ),
                                                    "random-integer": SymbolId(
                                                        3,
                                                    ),
                                                    "+": SymbolId(
                                                        1,
                                                    ),
                                                    "*": SymbolId(
                                                        2,
                                                    ),
                                                },
                                                current_id: 4,
                                            },
                                            memory: MemoryBlock {
                                                cars: [
                                                    "()",
                                                    "<environment>",
                                                ],
                                                cdrs: [
                                                    "()",
                                                    "(() ())",
                                                ],
                                                general: [],
                                            },
                                            stack: [],
                                            registers: [
                                                "()",
                                                "(<environment> (() ()))",
                                                "()",
                                                "()",
                                                "(<environment> (() ()))",
                                                "(() ())",
                                            ],
                                        },
                                        code: CompiledProgram {
                                            positions: [
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 1,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 6,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 11,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 16,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 31,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 15,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 15,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 13,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 8,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 3,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                None,
                                            ],
                                            commands: [
                                                PutValue {
                                                    value: <primitive procedure #8>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #10>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #8>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #34>,
                                                    register: Operator,
                                                },
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                PutValue {
                                                    value: 4,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: <length 1>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 1,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 4,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 3,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Jump(
                                                    40,
                                                ),
                                            ],
                                        },
                                    },
                                },
                            ],
                            weight: 0.34631734790174973,
                            rotateable: true,
                            symmetry: Horizontal,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(12),
                                    WorldChunkId(20),
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                left: [
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(9),
                                    WorldChunkId(17),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                up: [
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                    WorldChunkId(25),
                                ],
                                down: [
                                    WorldChunkId(4),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                    WorldChunkId(20),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                ],
                            },
                        },
                        WorldChunkId(5): ChunkRule {
                            name: "bunker",
                            tags: [],
                            weight: 8.657933697543744e-6,
                            rotateable: true,
                            symmetry: Horizontal,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(25),
                                    WorldChunkId(28),
                                    WorldChunkId(12),
                                    WorldChunkId(20),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                left: [
                                    WorldChunkId(25),
                                    WorldChunkId(9),
                                    WorldChunkId(17),
                                    WorldChunkId(28),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                up: [
                                    WorldChunkId(13),
                                    WorldChunkId(9),
                                    WorldChunkId(17),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                ],
                                down: [
                                    WorldChunkId(25),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                ],
                            },
                        },
                        WorldChunkId(9): ChunkRule {
                            name: "road_end",
                            tags: [],
                            weight: 0.004328966848771872,
                            rotateable: true,
                            symmetry: Vertical,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(8),
                                    WorldChunkId(4),
                                    WorldChunkId(28),
                                ],
                                left: [
                                    WorldChunkId(13),
                                    WorldChunkId(16),
                                ],
                                up: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                down: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                            },
                        },
                        WorldChunkId(15): ChunkRule {
                            name: "road_straight",
                            tags: [],
                            weight: 0.34631734790174973,
                            rotateable: true,
                            symmetry: Both,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                left: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                up: [
                                    WorldChunkId(15),
                                    WorldChunkId(23),
                                    WorldChunkId(19),
                                    WorldChunkId(11),
                                    WorldChunkId(14),
                                    WorldChunkId(22),
                                    WorldChunkId(24),
                                    WorldChunkId(21),
                                    WorldChunkId(10),
                                ],
                                down: [
                                    WorldChunkId(15),
                                    WorldChunkId(23),
                                    WorldChunkId(14),
                                    WorldChunkId(22),
                                    WorldChunkId(18),
                                    WorldChunkId(10),
                                    WorldChunkId(24),
                                    WorldChunkId(21),
                                ],
                            },
                        },
                        WorldChunkId(19): ChunkRule {
                            name: "road_corner",
                            tags: [],
                            weight: 0.08657933697543743,
                            rotateable: true,
                            symmetry: None,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(25),
                                ],
                                left: [
                                    WorldChunkId(23),
                                    WorldChunkId(22),
                                    WorldChunkId(24),
                                    WorldChunkId(21),
                                ],
                                up: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                down: [
                                    WorldChunkId(15),
                                    WorldChunkId(23),
                                    WorldChunkId(22),
                                    WorldChunkId(24),
                                    WorldChunkId(14),
                                    WorldChunkId(21),
                                ],
                            },
                        },
                        WorldChunkId(14): ChunkRule {
                            name: "road_straight",
                            tags: [],
                            weight: 0.34631734790174973,
                            rotateable: true,
                            symmetry: Both,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                left: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                up: [
                                    WorldChunkId(14),
                                    WorldChunkId(22),
                                    WorldChunkId(15),
                                    WorldChunkId(23),
                                    WorldChunkId(19),
                                    WorldChunkId(11),
                                    WorldChunkId(24),
                                    WorldChunkId(21),
                                ],
                                down: [
                                    WorldChunkId(14),
                                    WorldChunkId(22),
                                    WorldChunkId(18),
                                    WorldChunkId(10),
                                    WorldChunkId(15),
                                    WorldChunkId(23),
                                    WorldChunkId(24),
                                    WorldChunkId(11),
                                    WorldChunkId(21),
                                ],
                            },
                        },
                        WorldChunkId(23): ChunkRule {
                            name: "road_intersection",
                            tags: [],
                            weight: 0.043289668487718716,
                            rotateable: true,
                            symmetry: All,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(19),
                                    WorldChunkId(13),
                                    WorldChunkId(17),
                                    WorldChunkId(16),
                                ],
                                left: [
                                    WorldChunkId(16),
                                    WorldChunkId(20),
                                    WorldChunkId(18),
                                    WorldChunkId(13),
                                ],
                                up: [
                                    WorldChunkId(15),
                                    WorldChunkId(19),
                                    WorldChunkId(20),
                                    WorldChunkId(14),
                                ],
                                down: [
                                    WorldChunkId(15),
                                    WorldChunkId(14),
                                    WorldChunkId(18),
                                    WorldChunkId(17),
                                ],
                            },
                        },
                        WorldChunkId(28): ChunkRule {
                            name: "park",
                            tags: [],
                            weight: 0.08657933697543743,
                            rotateable: true,
                            symmetry: All,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(28),
                                    WorldChunkId(8),
                                    WorldChunkId(4),
                                    WorldChunkId(12),
                                    WorldChunkId(20),
                                    WorldChunkId(27),
                                    WorldChunkId(11),
                                    WorldChunkId(15),
                                    WorldChunkId(25),
                                    WorldChunkId(5),
                                    WorldChunkId(1),
                                    WorldChunkId(26),
                                    WorldChunkId(6),
                                    WorldChunkId(2),
                                    WorldChunkId(10),
                                    WorldChunkId(14),
                                    WorldChunkId(18),
                                ],
                                left: [
                                    WorldChunkId(28),
                                    WorldChunkId(8),
                                    WorldChunkId(4),
                                    WorldChunkId(26),
                                    WorldChunkId(10),
                                    WorldChunkId(14),
                                    WorldChunkId(25),
                                    WorldChunkId(5),
                                    WorldChunkId(1),
                                    WorldChunkId(9),
                                    WorldChunkId(17),
                                    WorldChunkId(27),
                                    WorldChunkId(7),
                                    WorldChunkId(3),
                                    WorldChunkId(11),
                                    WorldChunkId(15),
                                    WorldChunkId(19),
                                ],
                                up: [
                                    WorldChunkId(28),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                    WorldChunkId(26),
                                    WorldChunkId(6),
                                    WorldChunkId(2),
                                    WorldChunkId(10),
                                    WorldChunkId(18),
                                    WorldChunkId(27),
                                    WorldChunkId(7),
                                    WorldChunkId(3),
                                    WorldChunkId(25),
                                    WorldChunkId(5),
                                    WorldChunkId(1),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                    WorldChunkId(17),
                                ],
                                down: [
                                    WorldChunkId(28),
                                    WorldChunkId(8),
                                    WorldChunkId(4),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                    WorldChunkId(20),
                                    WorldChunkId(25),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                    WorldChunkId(27),
                                    WorldChunkId(7),
                                    WorldChunkId(3),
                                    WorldChunkId(11),
                                    WorldChunkId(19),
                                    WorldChunkId(26),
                                    WorldChunkId(6),
                                    WorldChunkId(2),
                                ],
                            },
                        },
                        WorldChunkId(2): ChunkRule {
                            name: "building",
                            tags: [
                                ChunkRuleTag {
                                    name: TextId(
                                        0,
                                    ),
                                    content: Program {
                                        memory: MemoryBlock {
                                            primitives: Primitives {
                                                indices: {
                                                    "make-vector": 29,
                                                    "<": 15,
                                                    "symbol?": 17,
                                                    "define": 26,
                                                    "car": 4,
                                                    "*": 10,
                                                    "remainder": 12,
                                                    "random-integer": 34,
                                                    "procedure?": 24,
                                                    "cdr": 5,
                                                    "+": 8,
                                                    "char?": 20,
                                                    "display": 32,
                                                    "=": 13,
                                                    "pair?": 18,
                                                    "newline": 33,
                                                    "vector-ref": 31,
                                                    "/": 11,
                                                    "eval": 28,
                                                    "random-float": 35,
                                                    "lambda": 25,
                                                    "set-cdr!": 7,
                                                    "vector?": 22,
                                                    "if": 2,
                                                    "eq?": 16,
                                                    "cons": 3,
                                                    "set-car!": 6,
                                                    "number?": 23,
                                                    "floor": 36,
                                                    "-": 9,
                                                    "begin": 0,
                                                    "vector-set!": 30,
                                                    "exact->inexact": 37,
                                                    "quote": 1,
                                                    "inexact->exact": 38,
                                                    ">": 14,
                                                    "let": 27,
                                                    "boolean?": 21,
                                                    "null?": 19,
                                                },
                                                primitives: [
                                                    <procedure with at least 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with between 2 and 3 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with at least 2 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 3 args>,
                                                    <procedure with 2 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 0 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 0 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                    <procedure with 1 args>,
                                                ],
                                            },
                                            symbols: Symbols {
                                                mappings: {
                                                    "begin": SymbolId(
                                                        0,
                                                    ),
                                                    "random-integer": SymbolId(
                                                        3,
                                                    ),
                                                    "+": SymbolId(
                                                        1,
                                                    ),
                                                    "*": SymbolId(
                                                        2,
                                                    ),
                                                },
                                                current_id: 4,
                                            },
                                            memory: MemoryBlock {
                                                cars: [
                                                    "()",
                                                    "<environment>",
                                                ],
                                                cdrs: [
                                                    "()",
                                                    "(() ())",
                                                ],
                                                general: [],
                                            },
                                            stack: [],
                                            registers: [
                                                "()",
                                                "(<environment> (() ()))",
                                                "()",
                                                "()",
                                                "(<environment> (() ()))",
                                                "(() ())",
                                            ],
                                        },
                                        code: CompiledProgram {
                                            positions: [
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 1,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 6,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 11,
                                                    },
                                                ),
                                                None,
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 16,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 31,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 15,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 15,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 13,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 10,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 8,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 5,
                                                    },
                                                ),
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 3,
                                                    },
                                                ),
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                None,
                                                None,
                                                Some(
                                                    CodePosition {
                                                        line: 1,
                                                        character: 0,
                                                    },
                                                ),
                                                None,
                                            ],
                                            commands: [
                                                PutValue {
                                                    value: <primitive procedure #8>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #10>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #8>,
                                                    register: Operator,
                                                },
                                                Push(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                Push(
                                                    Argument,
                                                ),
                                                PutValue {
                                                    value: <primitive procedure #34>,
                                                    register: Operator,
                                                },
                                                PutValue {
                                                    value: (),
                                                    register: Argument,
                                                },
                                                PutValue {
                                                    value: 4,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: <length 1>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 1,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 4,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Pop(
                                                    Argument,
                                                ),
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                PutValue {
                                                    value: 3,
                                                    register: Value,
                                                },
                                                Cons {
                                                    target: Argument,
                                                    car: Value,
                                                    cdr: Argument,
                                                },
                                                Pop(
                                                    Operator,
                                                ),
                                                PutValue {
                                                    value: <length 2>,
                                                    register: Temporary,
                                                },
                                                CallPrimitiveValue {
                                                    target: Value,
                                                },
                                                Jump(
                                                    40,
                                                ),
                                            ],
                                        },
                                    },
                                },
                            ],
                            weight: 0.34631734790174973,
                            rotateable: true,
                            symmetry: Horizontal,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(18),
                                    WorldChunkId(14),
                                    WorldChunkId(2),
                                    WorldChunkId(10),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(15),
                                    WorldChunkId(11),
                                ],
                                left: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(14),
                                    WorldChunkId(10),
                                    WorldChunkId(19),
                                    WorldChunkId(15),
                                    WorldChunkId(3),
                                    WorldChunkId(11),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                up: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(18),
                                    WorldChunkId(10),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                    WorldChunkId(11),
                                    WorldChunkId(25),
                                ],
                                down: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                            },
                        },
                        WorldChunkId(6): ChunkRule {
                            name: "bunker",
                            tags: [],
                            weight: 8.657933697543744e-6,
                            rotateable: true,
                            symmetry: Horizontal,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(14),
                                    WorldChunkId(18),
                                    WorldChunkId(10),
                                    WorldChunkId(27),
                                    WorldChunkId(15),
                                    WorldChunkId(11),
                                ],
                                left: [
                                    WorldChunkId(26),
                                    WorldChunkId(14),
                                    WorldChunkId(10),
                                    WorldChunkId(15),
                                    WorldChunkId(19),
                                    WorldChunkId(11),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                up: [
                                    WorldChunkId(26),
                                    WorldChunkId(18),
                                    WorldChunkId(10),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                    WorldChunkId(11),
                                    WorldChunkId(25),
                                ],
                                down: [
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                            },
                        },
                        WorldChunkId(11): ChunkRule {
                            name: "road_end",
                            tags: [],
                            weight: 0.004328966848771872,
                            rotateable: true,
                            symmetry: Vertical,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(25),
                                ],
                                left: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(25),
                                ],
                                up: [
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(14),
                                    WorldChunkId(26),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                down: [
                                    WorldChunkId(15),
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(14),
                                ],
                            },
                        },
                        WorldChunkId(12): ChunkRule {
                            name: "road_end",
                            tags: [],
                            weight: 0.004328966848771872,
                            rotateable: true,
                            symmetry: Vertical,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(16),
                                    WorldChunkId(13),
                                ],
                                left: [
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(1),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(5),
                                    WorldChunkId(25),
                                ],
                                up: [
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                down: [
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                            },
                        },
                        WorldChunkId(21): ChunkRule {
                            name: "road_intersection",
                            tags: [],
                            weight: 0.043289668487718716,
                            rotateable: true,
                            symmetry: All,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(13),
                                    WorldChunkId(17),
                                    WorldChunkId(16),
                                    WorldChunkId(19),
                                ],
                                left: [
                                    WorldChunkId(13),
                                    WorldChunkId(16),
                                    WorldChunkId(20),
                                    WorldChunkId(18),
                                ],
                                up: [
                                    WorldChunkId(15),
                                    WorldChunkId(19),
                                    WorldChunkId(14),
                                    WorldChunkId(20),
                                ],
                                down: [
                                    WorldChunkId(17),
                                    WorldChunkId(14),
                                    WorldChunkId(18),
                                    WorldChunkId(15),
                                ],
                            },
                        },
                        WorldChunkId(13): ChunkRule {
                            name: "road_straight",
                            tags: [],
                            weight: 0.34631734790174973,
                            rotateable: true,
                            symmetry: Both,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(13),
                                    WorldChunkId(21),
                                    WorldChunkId(9),
                                    WorldChunkId(17),
                                    WorldChunkId(16),
                                    WorldChunkId(24),
                                    WorldChunkId(22),
                                    WorldChunkId(23),
                                ],
                                left: [
                                    WorldChunkId(13),
                                    WorldChunkId(21),
                                    WorldChunkId(16),
                                    WorldChunkId(24),
                                    WorldChunkId(12),
                                    WorldChunkId(20),
                                    WorldChunkId(22),
                                    WorldChunkId(23),
                                ],
                                up: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                down: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                            },
                        },
                        WorldChunkId(16): ChunkRule {
                            name: "road_straight",
                            tags: [],
                            weight: 0.34631734790174973,
                            rotateable: true,
                            symmetry: Both,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(16),
                                    WorldChunkId(24),
                                    WorldChunkId(13),
                                    WorldChunkId(21),
                                    WorldChunkId(9),
                                    WorldChunkId(17),
                                    WorldChunkId(22),
                                    WorldChunkId(23),
                                ],
                                left: [
                                    WorldChunkId(16),
                                    WorldChunkId(24),
                                    WorldChunkId(12),
                                    WorldChunkId(20),
                                    WorldChunkId(13),
                                    WorldChunkId(21),
                                    WorldChunkId(22),
                                    WorldChunkId(23),
                                ],
                                up: [
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                                down: [
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                ],
                            },
                        },
                        WorldChunkId(17): ChunkRule {
                            name: "road_corner",
                            tags: [],
                            weight: 0.08657933697543743,
                            rotateable: true,
                            symmetry: None,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(8),
                                    WorldChunkId(4),
                                    WorldChunkId(28),
                                ],
                                left: [
                                    WorldChunkId(13),
                                    WorldChunkId(21),
                                    WorldChunkId(22),
                                    WorldChunkId(24),
                                    WorldChunkId(23),
                                    WorldChunkId(16),
                                ],
                                up: [
                                    WorldChunkId(21),
                                    WorldChunkId(22),
                                    WorldChunkId(24),
                                    WorldChunkId(23),
                                ],
                                down: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                ],
                            },
                        },
                        WorldChunkId(20): ChunkRule {
                            name: "road_corner",
                            tags: [],
                            weight: 0.08657933697543743,
                            rotateable: true,
                            symmetry: None,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(16),
                                    WorldChunkId(24),
                                    WorldChunkId(22),
                                    WorldChunkId(23),
                                    WorldChunkId(21),
                                    WorldChunkId(13),
                                ],
                                left: [
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(1),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(5),
                                    WorldChunkId(25),
                                ],
                                up: [
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(26),
                                    WorldChunkId(27),
                                    WorldChunkId(25),
                                ],
                                down: [
                                    WorldChunkId(24),
                                    WorldChunkId(22),
                                    WorldChunkId(23),
                                    WorldChunkId(21),
                                ],
                            },
                        },
                        WorldChunkId(25): ChunkRule {
                            name: "park",
                            tags: [],
                            weight: 0.08657933697543743,
                            rotateable: true,
                            symmetry: All,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(10),
                                    WorldChunkId(14),
                                    WorldChunkId(18),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(12),
                                    WorldChunkId(20),
                                    WorldChunkId(27),
                                    WorldChunkId(11),
                                    WorldChunkId(15),
                                ],
                                left: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(9),
                                    WorldChunkId(17),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(11),
                                    WorldChunkId(15),
                                    WorldChunkId(19),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(26),
                                    WorldChunkId(10),
                                    WorldChunkId(14),
                                ],
                                up: [
                                    WorldChunkId(25),
                                    WorldChunkId(1),
                                    WorldChunkId(5),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                    WorldChunkId(17),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(10),
                                    WorldChunkId(18),
                                    WorldChunkId(28),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                ],
                                down: [
                                    WorldChunkId(25),
                                    WorldChunkId(9),
                                    WorldChunkId(13),
                                    WorldChunkId(28),
                                    WorldChunkId(4),
                                    WorldChunkId(8),
                                    WorldChunkId(12),
                                    WorldChunkId(16),
                                    WorldChunkId(20),
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(11),
                                    WorldChunkId(19),
                                ],
                            },
                        },
                        WorldChunkId(10): ChunkRule {
                            name: "road_end",
                            tags: [],
                            weight: 0.004328966848771872,
                            rotateable: true,
                            symmetry: Vertical,
                            neighbors: DirectionsGroup {
                                right: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                left: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                                up: [
                                    WorldChunkId(14),
                                    WorldChunkId(27),
                                    WorldChunkId(3),
                                    WorldChunkId(7),
                                    WorldChunkId(15),
                                ],
                                down: [
                                    WorldChunkId(26),
                                    WorldChunkId(2),
                                    WorldChunkId(6),
                                    WorldChunkId(15),
                                    WorldChunkId(27),
                                    WorldChunkId(28),
                                    WorldChunkId(25),
                                ],
                            },
                        },
                    },
                    fallback: WorldChunkId(25),
                    entropy: -10.593073650964255,
                },
                underground: UndergroundRules(
                    ChunkRules {
                        rules: {
                            WorldChunkId(31): ChunkRule {
                                name: "underground",
                                tags: [],
                                weight: 1.0,
                                rotateable: true,
                                symmetry: All,
                                neighbors: DirectionsGroup {
                                    right: [
                                        WorldChunkId(31),
                                        WorldChunkId(29),
                                        WorldChunkId(30),
                                        WorldChunkId(32),
                                    ],
                                    left: [
                                        WorldChunkId(31),
                                        WorldChunkId(32),
                                        WorldChunkId(30),
                                        WorldChunkId(29),
                                    ],
                                    up: [
                                        WorldChunkId(31),
                                        WorldChunkId(32),
                                        WorldChunkId(29),
                                        WorldChunkId(30),
                                    ],
                                    down: [
                                        WorldChunkId(31),
                                        WorldChunkId(30),
                                        WorldChunkId(29),
                                        WorldChunkId(32),
                                    ],
                                },
                            },
                            WorldChunkId(32): ChunkRule {
                                name: "underground",
                                tags: [],
                                weight: 1.0,
                                rotateable: true,
                                symmetry: All,
                                neighbors: DirectionsGroup {
                                    right: [
                                        WorldChunkId(32),
                                        WorldChunkId(31),
                                        WorldChunkId(29),
                                        WorldChunkId(30),
                                    ],
                                    left: [
                                        WorldChunkId(32),
                                        WorldChunkId(30),
                                        WorldChunkId(29),
                                        WorldChunkId(31),
                                    ],
                                    up: [
                                        WorldChunkId(32),
                                        WorldChunkId(30),
                                        WorldChunkId(31),
                                        WorldChunkId(29),
                                    ],
                                    down: [
                                        WorldChunkId(32),
                                        WorldChunkId(29),
                                        WorldChunkId(31),
                                        WorldChunkId(30),
                                    ],
                                },
                            },
                            WorldChunkId(29): ChunkRule {
                                name: "underground",
                                tags: [],
                                weight: 1.0,
                                rotateable: true,
                                symmetry: All,
                                neighbors: DirectionsGroup {
                                    right: [
                                        WorldChunkId(29),
                                        WorldChunkId(30),
                                        WorldChunkId(32),
                                        WorldChunkId(31),
                                    ],
                                    left: [
                                        WorldChunkId(29),
                                        WorldChunkId(31),
                                        WorldChunkId(32),
                                        WorldChunkId(30),
                                    ],
                                    up: [
                                        WorldChunkId(29),
                                        WorldChunkId(31),
                                        WorldChunkId(30),
                                        WorldChunkId(32),
                                    ],
                                    down: [
                                        WorldChunkId(29),
                                        WorldChunkId(32),
                                        WorldChunkId(30),
                                        WorldChunkId(31),
                                    ],
                                },
                            },
                            WorldChunkId(30): ChunkRule {
                                name: "underground",
                                tags: [],
                                weight: 1.0,
                                rotateable: true,
                                symmetry: All,
                                neighbors: DirectionsGroup {
                                    right: [
                                        WorldChunkId(30),
                                        WorldChunkId(32),
                                        WorldChunkId(31),
                                        WorldChunkId(29),
                                    ],
                                    left: [
                                        WorldChunkId(30),
                                        WorldChunkId(29),
                                        WorldChunkId(31),
                                        WorldChunkId(32),
                                    ],
                                    up: [
                                        WorldChunkId(30),
                                        WorldChunkId(29),
                                        WorldChunkId(32),
                                        WorldChunkId(31),
                                    ],
                                    down: [
                                        WorldChunkId(30),
                                        WorldChunkId(31),
                                        WorldChunkId(32),
                                        WorldChunkId(29),
                                    ],
                                },
                            },
                        },
                        fallback: WorldChunkId(29),
                        entropy: -0.0,
                    },
                ),
                city: CityRules {
                    rules: [
                        ConditionalRule {
                            name: WorldChunkId(1),
                            variable: Height,
                            range: Number(
                                0,
                            )..Tag(
                                TextId(
                                    0,
                                ),
                            ),
                        },
                        ConditionalRule {
                            name: WorldChunkId(5),
                            variable: Height,
                            range: Number(
                                -2,
                            )..Number(
                                3,
                            ),
                        },
                    ],
                },
            },
        },
    }
    Indexer {
        size: Pos3 {
            x: 9,
            y: 9,
            z: 4,
        },
        player_position: GlobalPos(
            Pos3 {
                x: 0,
                y: 0,
                z: 0,
            },
        ),
    }
    (local: 0, 0, 0) | global: -4, -4, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 1, 0) | global: -4, -3, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 2, 0) | global: -4, -2, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 3, 0) | global: -4, -1, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 4, 0) | global: -4, 0, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 5, 0) | global: -4, 1, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 6, 0) | global: -4, 2, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 7, 0) | global: -4, 3, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 8, 0) | global: -4, 4, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 0, 0) | global: -3, -4, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 1, 0) | global: -3, -3, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 2, 0) | global: -3, -2, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 3, 0) | global: -3, -1, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 4, 0) | global: -3, 0, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 5, 0) | global: -3, 1, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 6, 0) | global: -3, 2, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 7, 0) | global: -3, 3, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 8, 0) | global: -3, 4, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 0, 0) | global: -2, -4, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 1, 0) | global: -2, -3, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 2, 0) | global: -2, -2, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 3, 0) | global: -2, -1, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 4, 0) | global: -2, 0, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 5, 0) | global: -2, 1, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 6, 0) | global: -2, 2, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 7, 0) | global: -2, 3, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 8, 0) | global: -2, 4, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 0, 0) | global: -1, -4, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 1, 0) | global: -1, -3, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 2, 0) | global: -1, -2, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 3, 0) | global: -1, -1, -2): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 4, 0) | global: -1, 0, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 5, 0) | global: -1, 1, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 6, 0) | global: -1, 2, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 7, 0) | global: -1, 3, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 8, 0) | global: -1, 4, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 0, 0) | global: 0, -4, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 1, 0) | global: 0, -3, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 2, 0) | global: 0, -2, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 3, 0) | global: 0, -1, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 4, 0) | global: 0, 0, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 5, 0) | global: 0, 1, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 6, 0) | global: 0, 2, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 7, 0) | global: 0, 3, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 8, 0) | global: 0, 4, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 0, 0) | global: 1, -4, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 1, 0) | global: 1, -3, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 2, 0) | global: 1, -2, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 3, 0) | global: 1, -1, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 4, 0) | global: 1, 0, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 5, 0) | global: 1, 1, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 6, 0) | global: 1, 2, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 7, 0) | global: 1, 3, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 8, 0) | global: 1, 4, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 0, 0) | global: 2, -4, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 1, 0) | global: 2, -3, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 2, 0) | global: 2, -2, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 3, 0) | global: 2, -1, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 4, 0) | global: 2, 0, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 5, 0) | global: 2, 1, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 6, 0) | global: 2, 2, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 7, 0) | global: 2, 3, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 8, 0) | global: 2, 4, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 0, 0) | global: 3, -4, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 1, 0) | global: 3, -3, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 2, 0) | global: 3, -2, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 3, 0) | global: 3, -1, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 4, 0) | global: 3, 0, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 5, 0) | global: 3, 1, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 6, 0) | global: 3, 2, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 7, 0) | global: 3, 3, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 8, 0) | global: 3, 4, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 0, 0) | global: 4, -4, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 1, 0) | global: 4, -3, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 2, 0) | global: 4, -2, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 3, 0) | global: 4, -1, -2) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 4, 0) | global: 4, 0, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 5, 0) | global: 4, 1, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 6, 0) | global: 4, 2, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 7, 0) | global: 4, 3, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 8, 0) | global: 4, 4, -2)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 0, 1) | global: -4, -4, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 1, 1) | global: -4, -3, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 2, 1) | global: -4, -2, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 3, 1) | global: -4, -1, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 4, 1) | global: -4, 0, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 5, 1) | global: -4, 1, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 6, 1) | global: -4, 2, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 7, 1) | global: -4, 3, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(5)(5)
    (local: 0, 8, 1) | global: -4, 4, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 0, 1) | global: -3, -4, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 1, 1) | global: -3, -3, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 2, 1) | global: -3, -2, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 3, 1) | global: -3, -1, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 4, 1) | global: -3, 0, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 5, 1) | global: -3, 1, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 6, 1) | global: -3, 2, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 7, 1) | global: -3, 3, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 1, 8, 1) | global: -3, 4, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 0, 1) | global: -2, -4, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 1, 1) | global: -2, -3, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 2, 1) | global: -2, -2, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 3, 1) | global: -2, -1, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 4, 1) | global: -2, 0, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 5, 1) | global: -2, 1, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 6, 1) | global: -2, 2, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 7, 1) | global: -2, 3, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 2, 8, 1) | global: -2, 4, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 0, 1) | global: -1, -4, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 1, 1) | global: -1, -3, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 2, 1) | global: -1, -2, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 3, 1) | global: -1, -1, -1): (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 4, 1) | global: -1, 0, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 5, 1) | global: -1, 1, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 6, 1) | global: -1, 2, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 7, 1) | global: -1, 3, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 3, 8, 1) | global: -1, 4, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 0, 1) | global: 0, -4, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 1, 1) | global: 0, -3, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 2, 1) | global: 0, -2, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 3, 1) | global: 0, -1, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 4, 1) | global: 0, 0, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 5, 1) | global: 0, 1, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 6, 1) | global: 0, 2, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(5)(5)
    (local: 4, 7, 1) | global: 0, 3, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 4, 8, 1) | global: 0, 4, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 0, 1) | global: 1, -4, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 1, 1) | global: 1, -3, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 2, 1) | global: 1, -2, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 3, 1) | global: 1, -1, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 4, 1) | global: 1, 0, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 5, 1) | global: 1, 1, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 6, 1) | global: 1, 2, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 7, 1) | global: 1, 3, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 5, 8, 1) | global: 1, 4, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 0, 1) | global: 2, -4, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 1, 1) | global: 2, -3, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 2, 1) | global: 2, -2, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 3, 1) | global: 2, -1, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 4, 1) | global: 2, 0, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 5, 1) | global: 2, 1, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 6, 1) | global: 2, 2, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 7, 1) | global: 2, 3, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 6, 8, 1) | global: 2, 4, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 0, 1) | global: 3, -4, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 1, 1) | global: 3, -3, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 2, 1) | global: 3, -2, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 3, 1) | global: 3, -1, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 4, 1) | global: 3, 0, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 5, 1) | global: 3, 1, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 6, 1) | global: 3, 2, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 7, 1) | global: 3, 3, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 7, 8, 1) | global: 3, 4, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 0, 1) | global: 4, -4, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 1, 1) | global: 4, -3, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 2, 1) | global: 4, -2, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 3, 1) | global: 4, -1, -1) : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 4, 1) | global: 4, 0, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 5, 1) | global: 4, 1, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 6, 1) | global: 4, 2, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 7, 1) | global: 4, 3, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 8, 8, 1) | global: 4, 4, -1)  : (29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)(29)
    (local: 0, 0, 2) | global: -4, -4, 0) : (1 [(0 19)])(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)
    (local: 0, 1, 2) | global: -4, -3, 0) : (9)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 2, 2) | global: -4, -2, 0) : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 3, 2) | global: -4, -1, 0) : (16)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 4, 2) | global: -4, 0, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 5, 2) | global: -4, 1, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 6, 2) | global: -4, 2, 0)  : (16)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 7, 2) | global: -4, 3, 0)  : (5)(5)(5)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 8, 2) | global: -4, 4, 0)  : (9)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 0, 2) | global: -3, -4, 0) : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 1, 2) | global: -3, -3, 0) : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 2, 2) | global: -3, -2, 0) : (18)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 3, 2) | global: -3, -1, 0) : (21)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 4, 2) | global: -3, 0, 0)  : (15)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 5, 2) | global: -3, 1, 0)  : (15)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 6, 2) | global: -3, 2, 0)  : (21)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 7, 2) | global: -3, 3, 0)  : (20)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 8, 2) | global: -3, 4, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 0, 2) | global: -2, -4, 0) : (10)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 1, 2) | global: -2, -3, 0) : (15)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 2, 2) | global: -2, -2, 0) : (21)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 3, 2) | global: -2, -1, 0) : (19)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 4, 2) | global: -2, 0, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 5, 2) | global: -2, 1, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 6, 2) | global: -2, 2, 0)  : (17)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 7, 2) | global: -2, 3, 0)  : (21)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 8, 2) | global: -2, 4, 0)  : (15)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 0, 2) | global: -1, -4, 0) : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 1, 2) | global: -1, -3, 0) : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 2, 2) | global: -1, -2, 0) : (16)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 3, 2) | global: -1, -1, 0) : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 4, 2) | global: -1, 0, 0)  : (12)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 5, 2) | global: -1, 1, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 6, 2) | global: -1, 2, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 7, 2) | global: -1, 3, 0)  : (16)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 8, 2) | global: -1, 4, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 0, 2) | global: 0, -4, 0)  : (1 [(0 15)])(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(0)
    (local: 4, 1, 2) | global: 0, -3, 0)  : (1 [(0 19)])(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)
    (local: 4, 2, 2) | global: 0, -2, 0)  : (16)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 3, 2) | global: 0, -1, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 4, 2) | global: 0, 0, 0)   : (6)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 5, 2) | global: 0, 1, 0)   : (25)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 6, 2) | global: 0, 2, 0)   : (5)(5)(5)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 7, 2) | global: 0, 3, 0)   : (9)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 8, 2) | global: 0, 4, 0)   : (1 [(0 19)])(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)
    (local: 5, 0, 2) | global: 1, -4, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 1, 2) | global: 1, -3, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 2, 2) | global: 1, -2, 0)  : (25)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 3, 2) | global: 1, -1, 0)  : (18)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 4, 2) | global: 1, 0, 0)   : (21)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 5, 2) | global: 1, 1, 0)   : (19)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 6, 2) | global: 1, 2, 0)   : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 7, 2) | global: 1, 3, 0)   : (1 [(0 7)])(1)(1)(1)(1)(1)(1)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 8, 2) | global: 1, 4, 0)   : (1 [(0 19)])(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)
    (local: 6, 0, 2) | global: 2, -4, 0)  : (15)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 1, 2) | global: 2, -3, 0)  : (10)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 2, 2) | global: 2, -2, 0)  : (15)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 3, 2) | global: 2, -1, 0)  : (21)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 4, 2) | global: 2, 0, 0)   : (19)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 5, 2) | global: 2, 1, 0)   : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 6, 2) | global: 2, 2, 0)   : (1 [(0 19)])(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)
    (local: 6, 7, 2) | global: 2, 3, 0)   : (1 [(0 15)])(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(0)
    (local: 6, 8, 2) | global: 2, 4, 0)   : (1 [(0 15)])(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(1)(0)
    (local: 7, 0, 2) | global: 3, -4, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 1, 2) | global: 3, -3, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 2, 2) | global: 3, -2, 0)  : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 3, 2) | global: 3, -1, 0)  : (16)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 4, 2) | global: 3, 0, 0)   : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 5, 2) | global: 3, 1, 0)   : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 6, 2) | global: 3, 2, 0)   : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 7, 2) | global: 3, 3, 0)   : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 8, 2) | global: 3, 4, 0)   : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 0, 2) | global: 4, -4, 0)  : (15)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 1, 2) | global: 4, -3, 0)  : (10)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 2, 2) | global: 4, -2, 0)  : (27)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 3, 2) | global: 4, -1, 0)  : (16)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 4, 2) | global: 4, 0, 0)   : (26)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 5, 2) | global: 4, 1, 0)   : (10)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 6, 2) | global: 4, 2, 0)   : (15)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 7, 2) | global: 4, 3, 0)   : (10)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 8, 2) | global: 4, 4, 0)   : (15)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 0, 3) | global: -4, -4, 1) : (1)(1)(1)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 1, 3) | global: -4, -3, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 2, 3) | global: -4, -2, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 3, 3) | global: -4, -1, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 4, 3) | global: -4, 0, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 5, 3) | global: -4, 1, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 6, 3) | global: -4, 2, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 7, 3) | global: -4, 3, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 0, 8, 3) | global: -4, 4, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 0, 3) | global: -3, -4, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 1, 3) | global: -3, -3, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 2, 3) | global: -3, -2, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 3, 3) | global: -3, -1, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 4, 3) | global: -3, 0, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 5, 3) | global: -3, 1, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 6, 3) | global: -3, 2, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 7, 3) | global: -3, 3, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 1, 8, 3) | global: -3, 4, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 0, 3) | global: -2, -4, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 1, 3) | global: -2, -3, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 2, 3) | global: -2, -2, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 3, 3) | global: -2, -1, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 4, 3) | global: -2, 0, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 5, 3) | global: -2, 1, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 6, 3) | global: -2, 2, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 7, 3) | global: -2, 3, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 2, 8, 3) | global: -2, 4, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 0, 3) | global: -1, -4, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 1, 3) | global: -1, -3, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 2, 3) | global: -1, -2, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 3, 3) | global: -1, -1, 1) : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 4, 3) | global: -1, 0, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 5, 3) | global: -1, 1, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 6, 3) | global: -1, 2, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 7, 3) | global: -1, 3, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 3, 8, 3) | global: -1, 4, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 0, 3) | global: 0, -4, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 1, 3) | global: 0, -3, 1)  : (1)(1)(1)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 2, 3) | global: 0, -2, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 3, 3) | global: 0, -1, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 4, 3) | global: 0, 0, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 5, 3) | global: 0, 1, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 6, 3) | global: 0, 2, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 7, 3) | global: 0, 3, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 4, 8, 3) | global: 0, 4, 1)   : (1)(1)(1)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 0, 3) | global: 1, -4, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 1, 3) | global: 1, -3, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 2, 3) | global: 1, -2, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 3, 3) | global: 1, -1, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 4, 3) | global: 1, 0, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 5, 3) | global: 1, 1, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 6, 3) | global: 1, 2, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 7, 3) | global: 1, 3, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 5, 8, 3) | global: 1, 4, 1)   : (1)(1)(1)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 0, 3) | global: 2, -4, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 1, 3) | global: 2, -3, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 2, 3) | global: 2, -2, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 3, 3) | global: 2, -1, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 4, 3) | global: 2, 0, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 5, 3) | global: 2, 1, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 6, 3) | global: 2, 2, 1)   : (1)(1)(1)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 7, 3) | global: 2, 3, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 6, 8, 3) | global: 2, 4, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 0, 3) | global: 3, -4, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 1, 3) | global: 3, -3, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 2, 3) | global: 3, -2, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 3, 3) | global: 3, -1, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 4, 3) | global: 3, 0, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 5, 3) | global: 3, 1, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 6, 3) | global: 3, 2, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 7, 3) | global: 3, 3, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 7, 8, 3) | global: 3, 4, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 0, 3) | global: 4, -4, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 1, 3) | global: 4, -3, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 2, 3) | global: 4, -2, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 3, 3) | global: 4, -1, 1)  : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 4, 3) | global: 4, 0, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 5, 3) | global: 4, 1, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 6, 3) | global: 4, 2, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 7, 3) | global: 4, 3, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (local: 8, 8, 3) | global: 4, 4, 1)   : (0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)(0)
    (1 [(0 19)])     (26)         (10)         (26)     (1 [(0 15)])     (26)         (15)         (26)         (15)    
        (9)          (26)         (15)         (26)     (1 [(0 19)])     (26)         (10)         (26)         (10)    
        (26)         (18)         (21)         (16)         (16)         (25)         (15)         (26)         (27)    
        (16)         (21)         (19)         (26)         (26)         (18)         (21)         (16)         (16)    
        (26)         (15)         (26)         (12)         (6)          (21)         (19)         (26)         (26)    
        (26)         (15)         (26)         (26)         (25)         (19)         (26)         (26)         (10)    
        (16)         (21)         (17)         (26)         (5)          (26)     (1 [(0 19)])     (26)         (15)    
        (5)          (20)         (21)         (16)         (9)      (1 [(0 7)])  (1 [(0 15)])     (26)         (10)    
        (9)          (26)         (15)         (26)     (1 [(0 19)]) (1 [(0 19)]) (1 [(0 15)])     (26)         (15)    ,
}
